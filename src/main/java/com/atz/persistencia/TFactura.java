package com.atz.persistencia;
// Generated 05-oct-2018 13:17:11 by Hibernate Tools 5.0.6.Final

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.ColumnDefault;

import com.atz.comparator.TFacturaLineaComp;

/**
 * TFactura generated by hbm2java
 */
@Entity
@Table(name = "t_factura", schema = "public", uniqueConstraints = { @UniqueConstraint(columnNames = { "numero2" }) })
public class TFactura implements java.io.Serializable {

	private int oid;
	private TCliente TCliente;
	private TCliente TCliente2;
	private TEstado TEstado;
	private Integer numero;
	private String numero2;
	private Date fecha;
	private Double iva;
	private Double ajuste;
	private Timestamp envio;
	private Date auditoria1;
	private Date auditoria2;
	private String ccEmail;
	private Set<TFacturaLinea> TFacturaLineas = new LinkedHashSet<TFacturaLinea>(0);
	private TEmpresa TEmpresa;
	
	public TFactura() {
	}

	public TFactura(int oid) {
		this.oid = oid;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "oid", unique = true, nullable = false)
	public int getOid() {
		return this.oid;
	}

	public void setOid(int oid) {
		this.oid = oid;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fk_cliente")
	public TCliente getTCliente() {
		return this.TCliente;
	}

	public void setTCliente(TCliente TCliente) {
		this.TCliente = TCliente;
	}

	@Column(name = "numero")
	public Integer getNumero() {
		return this.numero;
	}
	
	@Column(name = "numero2", unique = true)
	public String getNumero2() {
		return this.numero2;
	}

	public void setNumero(Integer numero) {
		this.numero = numero;
	}
	
	public void setNumero2(String numero2) {
		this.numero2 = numero2;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "fecha", length = 13)
	public Date getFecha() {
		return this.fecha;
	}

	public void setFecha(Date fecha) {
		this.fecha = fecha;
	}

	@Column(name = "iva", precision = 17, scale = 17)
	public Double getIva() {
		return this.iva;
	}

	public void setIva(Double iva) {
		this.iva = iva;
	}
	
	@Column(name = "ajuste", precision = 17, scale = 17)
	@ColumnDefault("0")
	public Double getAjuste() {
		return this.ajuste;
	}

	public void setAjuste(Double ajuste) {
		this.ajuste = ajuste;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "TFactura", cascade=CascadeType.ALL)
	public Set<TFacturaLinea> getTFacturaLineas() {
		return this.TFacturaLineas;
	}

	public void setTFacturaLineas(Set<TFacturaLinea> TFacturaLineas) {
		this.TFacturaLineas = new LinkedHashSet<>();
		this.TFacturaLineas.addAll(TFacturaLineas);
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fk_cliente_2")
	public TCliente getTCliente2() {
		return this.TCliente2;
	}

	public void setTCliente2(TCliente TCliente) {
		this.TCliente2 = TCliente;
	}
	
	@Column(name = "envio", insertable=false)
	public Timestamp getEnvio() {
		return this.envio;
	}

	public void setEnvio(Timestamp envio) {
		this.envio = envio;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fk_empresa")
	public TEmpresa getTEmpresa() {
		return this.TEmpresa;
	}

	public void setTEmpresa(TEmpresa TEmpresa) {
		this.TEmpresa = TEmpresa;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "fk_estado")
	public TEstado getTEstado() {
		return this.TEstado;
	}

	public void setTEstado(TEstado TEstado) {
		this.TEstado = TEstado;
	}
	
	@Transient
	public Double getBase() 
	{
		return this.TFacturaLineas.stream().mapToDouble( t -> t.getCantidad() * t.getPrecio() * ( 100 - t.getDescuento() ) / 100 ).sum();		
	}
	
	@Transient
	public Double getBaseIva() 
	{
		return this.getBase() * this.iva * 0.01;		
	}
	
	@Transient
	public Double getTotal() 
	{
		return this.getBase() + this.getBaseIva();	
	}
	
	@Transient
	public List<TFacturaLinea> getTFacturaLineaOrd() 
	{
		List<TFacturaLinea> lc = Arrays.asList( this.TFacturaLineas.toArray( new TFacturaLinea[0] ) );
		Collections.sort( lc, new TFacturaLineaComp() );
		return lc;
	}
	
	@Transient
	public Timestamp getEnvioOffset() 
	{
		TimeZone tz	= TimeZone.getTimeZone("Europe/Oslo");
		long ms1	= tz.getOffset(new Date().getTime());
		long ms2	= this.envio == null ? 0 : this.envio.getTime();
		
		return new Timestamp( ms1 + ms2 );
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "auditoria_1", length = 29)
	public Date getAuditoria1() {
		return this.auditoria1;
	}

	public void setAuditoria1(Date auditoria1) {
		this.auditoria1 = auditoria1;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "auditoria_2", length = 29)
	public Date getAuditoria2() {
		return this.auditoria2;
	}

	public void setAuditoria2(Date auditoria2) {
		this.auditoria2 = auditoria2;
	}

	@Column(name = "cc_email")
	public String getCcEmail() {
		return ccEmail;
	}

	public void setCcEmail(String ccEmail) {
		this.ccEmail = ccEmail;
	}
}
